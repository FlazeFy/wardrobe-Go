// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Leonardho R. Sitanggang",
            "email": "flazen.edu@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auths/login": {
            "post": {
                "description": "Login to the Apps using basic login",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Post Basic Login",
                "parameters": [
                    {
                        "description": "Post Basic Login Request Body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/others.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/others.ResponsePostBasicLogin"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/others.ResponseBadRequest"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/others.ResponseNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/others.ResponseInternalServerError"
                        }
                    }
                }
            }
        },
        "/api/v1/auths/profile": {
            "get": {
                "description": "Get current user profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get My Profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/others.MyProfile"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/others.ResponseBadRequestInvalidUserId"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/others.ResponseNotFound"
                        }
                    }
                }
            }
        },
        "/api/v1/auths/signout": {
            "post": {
                "description": "Sign Out from the Apps",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Post Basic Sign Out",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/others.ResponsePostBasicSignOut"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/others.ResponseBadRequestBasicSignOut"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "others.LoginData": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string",
                    "example": "user"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                }
            }
        },
        "others.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 36,
                    "minLength": 6,
                    "example": "flazen.test@gmail.com"
                },
                "password": {
                    "type": "string",
                    "maxLength": 36,
                    "minLength": 6,
                    "example": "nopassword"
                }
            }
        },
        "others.MyProfile": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2025-07-16T20:25:19.945914+07:00"
                },
                "email": {
                    "type": "string",
                    "example": "testeruser@gmail.com"
                },
                "telegram_is_valid": {
                    "type": "boolean",
                    "example": false
                },
                "telegram_user_id": {
                    "type": "string",
                    "example": "1317453312"
                },
                "username": {
                    "type": "string",
                    "example": "testeruser"
                }
            }
        },
        "others.ResponseBadRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "email is not valid"
                },
                "status": {
                    "type": "string",
                    "example": "failed"
                }
            }
        },
        "others.ResponseBadRequestBasicSignOut": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "missing authorization header"
                },
                "status": {
                    "type": "string",
                    "example": "failed"
                }
            }
        },
        "others.ResponseBadRequestInvalidUserId": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "invalid user id"
                },
                "status": {
                    "type": "string",
                    "example": "failed"
                }
            }
        },
        "others.ResponseInternalServerError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "something went wrong"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "others.ResponseNotFound": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "account not found"
                },
                "status": {
                    "type": "string",
                    "example": "failed"
                }
            }
        },
        "others.ResponsePostBasicLogin": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/others.LoginData"
                },
                "message": {
                    "type": "string",
                    "example": "User login"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "others.ResponsePostBasicSignOut": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User signed out"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Wardrobe API",
	Description:      "API Documentation for Wardrobe BE - Go Gin",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
